{"version":3,"sources":["store/types/todosTypes.ts","store/types/tabTypes.ts","store/types/filterTypes.ts","config/API.ts","store/actions/todosAction.ts","store/actions/filtersAction.ts","components/atoms/NavItem/NavItem.tsx","components/atoms/Logo/default-logo.svg","components/atoms/Logo/Logo.tsx","components/molecules/Nav/NavBrand.tsx","components/molecules/Nav/NavMenu.tsx","components/organisms/Navbar.tsx","store/actions/tabsAction.ts","components/atoms/Card/Card.tsx","components/atoms/Button/Button.tsx","components/atoms/TextField/TextField.tsx","components/molecules/Create/CreateContent.tsx","components/molecules/Create/Create.tsx","components/atoms/Checkbox/Checkbox.tsx","components/atoms/Badge/Badge.tsx","components/molecules/Filter/FilterContent.tsx","components/molecules/Filter/Filters.tsx","components/organisms/Sidebar.tsx","components/molecules/Modal/Modal.tsx","components/atoms/Label/Label.tsx","components/molecules/TodoList/EditTodoModal.tsx","components/atoms/Heading/Heading.tsx","components/molecules/TodoList/DeleteTodoModal.tsx","components/molecules/TodoList/ConfirmTodoMyListModal.tsx","utils/utils.ts","components/molecules/TodoList/TodoItem.tsx","components/molecules/TodoList/TodoList.tsx","components/organisms/MainContent.tsx","components/templates/Dashboard.tsx","App.tsx","containers/Workspace.ts","reportWebVitals.ts","store/reducers/todosReducer.ts","store/reducers/tabsReducer.ts","store/reducers/filtersReducer.ts","store/store.ts","index.tsx"],"names":["GET_TODOS","SET_LOADING","SET_ERROR","GET_TODO_BY_ID","ADD_TODO","DELETE_TODO","UPDATE_TODO","SET_TODOID_TO_DELETE","SET_TODO_TO_EDIT","SET_TODO_TO_CONFIRM","SET_SELECTED_TODOS","REMOVE_SELECTED_TODOS","SET_TAB_ACTIVE","FILTER_TEXT","FILTER_COMPLETED","FILTER_CLEAR","API","fetch","method","setTodoIdToDelete","id","type","payload","setTodoToEdit","setTodoToConfirm","defaultFilter","text","completed","NavItem","href","children","className","clickHandler","onClick","Logo","url","src","defaultLogo","alt","NavBrand","brandLogo","NavMenu","activeTab","setActiveTabClick","e","Navbar","dispatch","useDispatch","useSelector","state","tabs","activeName","role","aria-label","name","Card","title","Button","dataVal","TextField","value","placeholder","onChange","CreateContent","createCompState","setCreateCompState","submitHandler","todoName","currentTarget","prevState","Create","createCompInitialState","useState","preventDefault","trim","alert","newTodo","Date","getTime","creationDate","Checkbox","checked","Badge","FilterContent","filterCompState","setFilterCompState","filterTextChange","filterOnlyCompletedOnes","clickClearHandler","completedTodo","Filters","filterCompInitialState","txtVal","checkVal","Sidebar","Modal","okClick","cancelClick","okBtnCaption","cancelBtnCaption","okBtnClass","Label","EditTodoModal","todo","todoTitle","setTodoTitle","todoCompleteState","setTodoCompleteState","HeadingText","DeleteTodoModal","todoId","todos","todoById","useEffect","console","log","Heading","ConfirmTodoMyListModal","modalOppositeActiveTabName","removeTodoFromSelected","getCollectionFromLS","lsKeyName","localStorage","getItem","JSON","parse","saveCollectionToLS","setItem","stringify","convertArrToObj","arr","keyRef","reduce","obj","item","hoursFormat","date","hours","getHours","minutes","getMinutes","TodoItem","userId","addToListBtnTitle","addToBtnClassName","setTodoToConfirmHandler","setTodoToEditHandler","setTodoIdToDeleteHandler","Number","TodoList","todosData","currentPage","setCurrentPage","filteredTodos","filters","selectedTodosFromLS","filter","todoItem","textTodosMatch","toLowerCase","includes","completedTodosMatch","Object","keys","String","getFilteredTodos","filteredTodosLength","length","totalPages","Math","ceil","indexOfLastTodo","indexOfFirstTodo","currentTodos","slice","pageNumbers","i","push","renderPageNumbers","map","pgNumber","todosCollection","MainContent","loading","data","error","todoToEdit","todoIdToDelete","todoToConfirm","a","getTodos","res","ok","json","resData","Error","message","Dashboard","App","compose","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialTodosState","selectedTodos","initialTabsState","initialFilterState","mainReducer","combineReducers","action","todosFromLS","fetchedTodos","values","clonedTodosFromLS","clonedTodosFromLS2","clonedTodosFromLS3","clonedSelectedTodosFromLS","clonedSelectedTodosFromLSToRemove","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8921b292.chunk.js","sourcesContent":["export const GET_TODOS = \"GET_TODOS\";\nexport const SET_LOADING = \"SET_LOADING\";\nexport const SET_ERROR = \"SET_ERROR\";\n\nexport const GET_TODO_BY_ID = \"GET_TODO_BY_ID\";\nexport const ADD_TODO = \"ADD_TODO\";\nexport const DELETE_TODO = \"DELETE_TODO\";\nexport const UPDATE_TODO = \"UPDATE_TODO\";\nexport const SET_TODOID_TO_DELETE = \"SET_TODOID_TO_DELETE\";\nexport const SET_TODO_TO_EDIT = \"SET_TODO_TO_EDIT\";\nexport const SET_TODO_TO_CONFIRM = \"SET_TODO_TO_CONFIRM\";\nexport const SET_SELECTED_TODOS = \"SET_SELECTED_TODOS\";\nexport const REMOVE_SELECTED_TODOS = \"REMOVE_SELECTED_TODOS\";\nexport interface Todo {\n    id: number;\n    title: string;\n    creationDate: string;\n    completed: boolean;\n}\nexport interface TodosData {\n    todos: Todo[];\n}\n\n// complete todos data load specific\nexport interface TodosState {\n    data: TodosData | null | Todo[];\n    loading: boolean;\n    error: string;\n    todoIdToDelete: string;\n    todoToEdit: Todo | null;\n    todoById: Todo | null;\n    todoToConfirm: string;\n    selectedTodos: Todo | object | null;\n}\n\n// error handling during API call\nexport interface APIError {\n    code: string;\n    message: string;\n    data: string;\n}\n\n// actions specific\n\ninterface GetTodosAction {\n    type: typeof GET_TODOS;\n    payload: TodosData;\n}\ninterface SetLoadingAction {\n    type: typeof SET_LOADING;\n}\n\ninterface SetErrorAction {\n    type: typeof SET_ERROR;\n    payload: string;\n}\ninterface AddTodoAction {\n    type: typeof ADD_TODO;\n    payload: Todo;\n}\n\ninterface GetTodoByIdAction {\n    type: typeof GET_TODO_BY_ID;\n    payload: string;\n}\n\ninterface SetTodoIdToDeleteAction {\n    type: typeof SET_TODOID_TO_DELETE;\n    payload: string;\n}\n\ninterface SetTodoToEditAction {\n    type: typeof SET_TODO_TO_EDIT;\n    payload: string;\n}\n\ninterface DeleteTodoAction {\n    type: typeof DELETE_TODO;\n    payload: string;\n}\n\ninterface UpdateTodoAction {\n    type: typeof UPDATE_TODO;\n    payload: {\n        id: number;\n        title: string;\n        completed: boolean;\n    };\n}\n\ninterface SetTodoToConfirmAction {\n    type: typeof SET_TODO_TO_CONFIRM;\n    payload: string;\n}\ninterface SetSelectedTodosAction {\n    type: typeof SET_SELECTED_TODOS;\n    payload: string;\n}\n\ninterface RemoveSelectedTodosAction {\n    type: typeof REMOVE_SELECTED_TODOS;\n    payload: string;\n}\n\n// type alias\nexport type TodosAction =\n    | GetTodosAction\n    | SetLoadingAction\n    | SetErrorAction\n    | AddTodoAction\n    | GetTodoByIdAction\n    | SetTodoIdToDeleteAction\n    | SetTodoToEditAction\n    | DeleteTodoAction\n    | UpdateTodoAction\n    | SetTodoToConfirmAction\n    | SetSelectedTodosAction\n    | RemoveSelectedTodosAction;\n","export const SET_TAB_ACTIVE = \"SET_TAB_ACTIVE\";\nexport interface TabsState {\n    activeName: string;\n}\ninterface TabActiveAction {\n    type: typeof SET_TAB_ACTIVE;\n    activeName: string;\n}\n\nexport type TabsAction = TabActiveAction;\n","export const FILTER_TEXT = \"FILTER_TEXT\";\nexport const FILTER_COMPLETED = \"FILTER_COMPLETED\";\nexport const FILTER_CLEAR = \"FILTER_CLEAR\";\n\nexport interface FilterState {\n    text: string;\n    completed: boolean;\n}\ninterface FilterTextAction {\n    type: typeof FILTER_TEXT;\n    text: string;\n}\ninterface FilterCompletedAction {\n    type: typeof FILTER_COMPLETED;\n    completed: boolean;\n}\ninterface FilterClearAction {\n    type: typeof FILTER_CLEAR;\n    defaultFilter: FilterState;\n}\n\nexport type FilterAction = FilterTextAction | FilterCompletedAction | FilterClearAction;\n","const API_BASE_ADDRESS = `https://jsonplaceholder.typicode.com/todos/`;\n\nexport default class API {\n    static getTodos() {\n        const uri = API_BASE_ADDRESS;\n        return fetch(uri, {\n            method: \"GET\",\n        });\n    }\n}\n","import { ThunkAction } from \"redux-thunk\";\nimport {\n    GET_TODOS,\n    TodosAction,\n    Todo,\n    SET_LOADING,\n    SET_ERROR,\n    TodosData,\n    APIError,\n    ADD_TODO,\n    GET_TODO_BY_ID,\n    SET_TODOID_TO_DELETE,\n    SET_TODO_TO_EDIT,\n    SET_TODO_TO_CONFIRM,\n    SET_SELECTED_TODOS,\n    REMOVE_SELECTED_TODOS,\n    DELETE_TODO,\n    UPDATE_TODO,\n} from \"../types\";\nimport { RootState } from \"../store\";\nimport API from \"../../config/API\";\n\nexport const getTodos = (): ThunkAction<void, RootState, null, TodosAction> => {\n    return async (dispatch) => {\n        try {\n            const res = await API.getTodos();\n\n            if (!res.ok) {\n                const resData: APIError = await res.json();\n                throw new Error(resData.data);\n            }\n\n            const resData: TodosData = await res.json();\n            dispatch({\n                type: GET_TODOS,\n                payload: resData,\n            });\n        } catch (err) {\n            dispatch({\n                type: SET_ERROR,\n                payload: err.message,\n            });\n        }\n    };\n};\n\nexport const setLoading = (): TodosAction => {\n    return {\n        type: SET_LOADING,\n    };\n};\n\nexport const setError = (): TodosAction => {\n    return {\n        type: SET_ERROR,\n        payload: \"\",\n    };\n};\n\nexport const addTodo = (todo: Todo): TodosAction => {\n    return {\n        type: ADD_TODO,\n        payload: todo,\n    };\n};\n\nexport const getTodoById = (id: string): TodosAction => {\n    return {\n        type: GET_TODO_BY_ID,\n        payload: id,\n    };\n};\n\nexport const setTodoIdToDelete = (id: string): TodosAction => {\n    return {\n        type: SET_TODOID_TO_DELETE,\n        payload: id,\n    };\n};\n\nexport const setTodoToEdit = (id: string): TodosAction => {\n    return {\n        type: SET_TODO_TO_EDIT,\n        payload: id,\n    };\n};\n\nexport const setTodoToConfirm = (id: string): TodosAction => {\n    return {\n        type: SET_TODO_TO_CONFIRM,\n        payload: id,\n    };\n};\n\nexport const setTodoToSelected = (id: string): TodosAction => {\n    return {\n        type: SET_SELECTED_TODOS,\n        payload: id,\n    };\n};\n\nexport const removeTodoFromSelected = (id: string): TodosAction => {\n    return {\n        type: REMOVE_SELECTED_TODOS,\n        payload: id,\n    };\n};\n\nexport const deleteTodo = (id: string): TodosAction => {\n    return {\n        type: DELETE_TODO,\n        payload: id,\n    };\n};\n\nexport const updateTodo = (id: number, title: string, completed: boolean): TodosAction => {\n    return {\n        type: UPDATE_TODO,\n        payload: {\n            id,\n            title,\n            completed,\n        },\n    };\n};\n","import { FilterAction, FILTER_TEXT, FILTER_COMPLETED, FILTER_CLEAR } from \"../types\";\n\nexport const filterText = (text: string): FilterAction => {\n    return {\n        type: FILTER_TEXT,\n        text,\n    };\n};\n\nexport const filterCompleted = (completed: boolean): FilterAction => {\n    return {\n        type: FILTER_COMPLETED,\n        completed,\n    };\n};\n\nconst defaultFilter = {\n    text: \"\",\n    completed: false,\n};\n\nexport const filterClear = (): FilterAction => {\n    return {\n        type: FILTER_CLEAR,\n        defaultFilter,\n    };\n};\n","import React, { FC, ReactNode, MouseEvent } from \"react\";\n\ninterface NavItemProps {\n    href?: string;\n    className?: string;\n    children?: ReactNode;\n    clickHandler?: (e: MouseEvent<HTMLAnchorElement>) => void;\n}\n\nconst NavItem: FC<NavItemProps> = ({ href, children, className, clickHandler }) => {\n    return (\n        <a className={`navbar-item ${className || \"\"}`} href={href || \"#\"} onClick={clickHandler}>\n            {children}\n        </a>\n    );\n};\n\nexport default NavItem;\n","export default __webpack_public_path__ + \"static/media/default-logo.103b5fa1.svg\";","import React, { FC } from \"react\";\nimport defaultLogo from \"./default-logo.svg\";\nimport \"./Logo.css\";\n\ninterface LogoProps {\n    url?: string;\n}\n\nconst Logo: FC<LogoProps> = ({ url }) => {\n    return <img className=\"logo-img\" src={url || defaultLogo} alt=\"logo-img\" />;\n};\n\nexport default Logo;\n","import React, { FC } from \"react\";\nimport NavItem from \"../../atoms/NavItem/NavItem\";\nimport Logo from \"../../atoms/Logo/Logo\";\ninterface NavBrandProps {\n    brandLogo?: string;\n}\n\nconst NavBrand: FC<NavBrandProps> = ({ brandLogo }) => {\n    return (\n        <div className=\"navbar-brand\">\n            <NavItem href=\"#\">\n                <Logo url={brandLogo} />\n            </NavItem>\n        </div>\n    );\n};\n\nexport default NavBrand;\n","import React, { FC, MouseEvent } from \"react\";\nimport NavItem from \"../../atoms/NavItem/NavItem\";\ninterface NavMenuProps {\n    activeTab?: string;\n    setActiveTabClick: (e: MouseEvent<HTMLAnchorElement>, name: string) => void;\n}\n\nconst NavMenu: FC<NavMenuProps> = ({ activeTab, setActiveTabClick }) => {\n    return (\n        <div className=\"navbar-menu\">\n            <div className=\"navbar-end\">\n                <NavItem\n                    className={`${activeTab === \"all\" ? \"is-active\" : \"\"}`}\n                    clickHandler={(e: MouseEvent<HTMLAnchorElement>) => setActiveTabClick(e, \"all\")}\n                >\n                    All Todos\n                </NavItem>\n                <NavItem\n                    className={`${activeTab === \"mylist\" ? \"is-active\" : \"\"}`}\n                    clickHandler={(e: MouseEvent<HTMLAnchorElement>) => setActiveTabClick(e, \"mylist\")}\n                >\n                    My Todo list\n                </NavItem>\n            </div>\n        </div>\n    );\n};\n\nexport default NavMenu;\n","import React, { FC, MouseEvent, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../../store/store\";\nimport { setTabActive } from \"../../store/actions\";\n\nimport NavBrand from \"../molecules/Nav/NavBrand\";\nimport NavMenu from \"../molecules/Nav/NavMenu\";\n\nimport \"./Navbar.css\";\n\nconst Navbar: FC = () => {\n    const dispatch = useDispatch();\n    const activeTab = useSelector((state: RootState) => state.tabs?.activeName);\n\n    const setActiveTabClick = (e: MouseEvent<HTMLAnchorElement>, name: string) => {\n        dispatch(setTabActive(name));\n    };\n\n    return (\n        <header>\n            <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n                <NavBrand />\n                <NavMenu activeTab={activeTab} setActiveTabClick={setActiveTabClick} />\n            </nav>\n        </header>\n    );\n};\n\nexport default Navbar;\n","import { TabsAction, SET_TAB_ACTIVE } from \"../types\";\n\nexport const setTabActive = (activeName: string): TabsAction => {\n    return {\n        type: SET_TAB_ACTIVE,\n        activeName,\n    };\n};\n","import React, { FC, ReactNode } from \"react\";\nimport \"./Card.css\";\ninterface CardProps {\n    title?: string;\n    children?: ReactNode;\n}\n\nconst Card: FC<CardProps> = ({ title, children }) => {\n    const renderCardTitle = () => (\n        <div className=\"card-header\">\n            <p className=\"card-header-title\">\n                <span>{title || \"\"}</span>\n            </p>\n        </div>\n    );\n    return (\n        <div className=\"card\">\n            {title ? renderCardTitle() : \"\"}\n            <div className=\"card-content\">{children}</div>\n        </div>\n    );\n};\n\nexport default Card;\n","import React, { FC, MouseEvent } from \"react\";\nimport \"./Button.css\";\ninterface ButtonProps {\n    title?: string;\n    dataVal?: string;\n    className?: string;\n    onClick?: MouseEvent<HTMLAnchorElement> | any;\n}\n\nconst Button: FC<ButtonProps> = ({ title, onClick, dataVal, className }) => {\n    return (\n        <a role=\"button\" className={`button ${className || \"\"}`} onClick={onClick} id={dataVal}>\n            {title || \"\"}\n        </a>\n    );\n};\n\nexport default Button;\n","import React, { FC, FormEvent } from \"react\";\nimport \"./TextField.css\";\ninterface TextFieldProps {\n    name?: string;\n    value?: string;\n    className?: string;\n    placeholder?: string;\n    onChange?: (e: FormEvent<HTMLInputElement>) => void;\n}\n\nconst TextField: FC<TextFieldProps> = ({ name, value, className, placeholder, onChange }) => {\n    return (\n        <input\n            type=\"text\"\n            className={`input ${className || \"\"}`}\n            placeholder={placeholder || \"\"}\n            name={name}\n            value={value}\n            onChange={onChange}\n        />\n    );\n};\n\nexport default TextField;\n","import React, { FC, FormEvent, useRef } from \"react\";\nimport Button from \"../../atoms/Button/Button\";\n\nimport TextField from \"../../atoms/TextField/TextField\";\n\ninterface CreateContentProps {\n    createCompState: any;\n    setCreateCompState: any;\n    submitHandler: (e: FormEvent<HTMLFormElement>) => void;\n}\n\nconst CreateContent: FC<CreateContentProps> = ({ createCompState, setCreateCompState, submitHandler }) => {\n    const { todoName } = createCompState;\n\n    const nameInputChangeHandler = (e: FormEvent<HTMLInputElement>) => {\n        const { name, value } = e.currentTarget;\n        setCreateCompState((prevState: object) => ({ ...prevState, [name]: value }));\n    };\n\n    return (\n        <div>\n            <form>\n                <div className=\"field\">\n                    <TextField\n                        name=\"todoName\"\n                        placeholder=\"Todo Name\"\n                        value={todoName}\n                        onChange={nameInputChangeHandler}\n                    />\n                </div>\n                <div className=\"field\">\n                    <Button title={\"Save\"} onClick={submitHandler} />\n                </div>\n            </form>\n        </div>\n    );\n};\n\nexport default CreateContent;\n","import React, { FC, useState, FormEvent } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { Todo } from \"../../../store/types\";\nimport { addTodo } from \"../../../store/actions\";\n\nimport Card from \"../../atoms/Card/Card\";\nimport CreateContent from \"./CreateContent\";\n\nconst Create: FC = () => {\n    const dispatch = useDispatch();\n    const createCompInitialState = {\n        todoName: \"\",\n    };\n\n    const [createCompState, setCreateCompState] = useState(createCompInitialState);\n\n    const submitHandler = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        const { todoName } = createCompState;\n        if (todoName.trim() === \"\") {\n            return alert(\"Todo name is required!\");\n        }\n\n        const newTodo: Todo = {\n            id: new Date().getTime(),\n            title: todoName,\n            creationDate: `${new Date().getTime()}`,\n            completed: false,\n        };\n\n        dispatch(addTodo(newTodo));\n        setCreateCompState(createCompInitialState);\n    };\n\n    return (\n        <Card title=\"Create Todo Items\">\n            <CreateContent\n                createCompState={createCompState}\n                setCreateCompState={setCreateCompState}\n                submitHandler={submitHandler}\n            />\n        </Card>\n    );\n};\n\nexport default Create;\n","import React, { FC, FormEvent } from \"react\";\nimport \"./Checkbox.css\";\ninterface CheckboxProps {\n    name?: string;\n    checked?: boolean;\n    className?: string;\n    onChange?: (e: FormEvent<HTMLInputElement>) => void; // function type\n}\n\nconst Checkbox: FC<CheckboxProps> = ({ name, checked, className, onChange }) => {\n    return <input type=\"checkbox\" className={`${className || \"\"}`} name={name} checked={checked} onChange={onChange} />;\n};\n\nexport default Checkbox;\n","import React, { FC } from \"react\";\nimport \"./Badge.css\";\ninterface BadgeProps {\n    title?: string;\n}\n\nconst Badge: FC<BadgeProps> = ({ title }) => {\n    return <span className=\"badge\">{title || \"\"}</span>;\n};\n\nexport default Badge;\n","import React, { FC, FormEvent, MouseEvent } from \"react\";\n\nimport TextField from \"../../atoms/TextField/TextField\";\nimport Checkbox from \"../../atoms/Checkbox/Checkbox\";\nimport Badge from \"../../atoms/Badge/Badge\";\nimport Button from \"../../atoms/Button/Button\";\n\ninterface FilterContentProps {\n    filterCompState: any;\n    setFilterCompState: any;\n    filterTextChange: (txtVal: string) => void;\n    filterOnlyCompletedOnes: (checkVal: boolean) => void;\n    clickClearHandler?: (e: MouseEvent<HTMLAnchorElement>) => void;\n}\n\nconst FilterContent: FC<FilterContentProps> = ({\n    filterCompState,\n    setFilterCompState,\n    filterTextChange,\n    filterOnlyCompletedOnes,\n    clickClearHandler,\n}) => {\n    const { todoName, completedTodo } = filterCompState;\n\n    const nameInputChangeHandler = (e: FormEvent<HTMLInputElement>) => {\n        const { name, value } = e.currentTarget;\n        setFilterCompState((prevState: object) => ({ ...prevState, [name]: value }));\n        // trigger to update store\n        filterTextChange(value);\n    };\n\n    const onlyCompletedChangeHandler = (e: FormEvent<HTMLInputElement>) => {\n        const { name, checked } = e.currentTarget;\n        setFilterCompState((prevState: object) => ({ ...prevState, [name]: checked }));\n        // trigger to update store\n        filterOnlyCompletedOnes(checked);\n    };\n\n    return (\n        <div className=\"filter-container\">\n            <form>\n                <div className=\"field\">\n                    <TextField\n                        name=\"todoName\"\n                        placeholder=\"Filter todo name\"\n                        value={todoName}\n                        onChange={nameInputChangeHandler}\n                    />\n                </div>\n                <div className=\"field completed-check-container\">\n                    <Checkbox\n                        name=\"completedTodo\"\n                        className=\"filter-checkbox\"\n                        checked={completedTodo}\n                        onChange={onlyCompletedChangeHandler}\n                    />{\" \"}\n                    Only <Badge title=\"Completed\" />\n                </div>\n                <Button title=\"Clear All\" onClick={clickClearHandler} />\n            </form>\n        </div>\n    );\n};\n\nexport default FilterContent;\n","import React, { FC, useState, MouseEvent } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { filterText, filterCompleted, filterClear } from \"../../../store/actions\";\n\nimport Card from \"../../atoms/Card/Card\";\nimport FilterContent from \"./FilterContent\";\n\nimport \"./Filters.css\";\n\nconst Filters: FC = () => {\n    const dispatch = useDispatch();\n\n    const filterCompInitialState = {\n        todoName: \"\",\n        completedTodo: false,\n    };\n\n    const [filterCompState, setFilterCompState] = useState(filterCompInitialState);\n\n    const filterTextChange = (txtVal: string) => {\n        dispatch(filterText(txtVal));\n    };\n\n    const filterOnlyCompletedOnes = (checkVal: boolean) => {\n        dispatch(filterCompleted(checkVal));\n    };\n\n    const clickClearHandler = (e: MouseEvent<HTMLAnchorElement>) => {\n        e.preventDefault();\n        setFilterCompState({ ...filterCompInitialState });\n        // trigger to update store\n        dispatch(filterClear());\n    };\n\n    return (\n        <Card title=\"Filter by\">\n            <FilterContent\n                filterCompState={filterCompState}\n                setFilterCompState={setFilterCompState}\n                filterTextChange={filterTextChange}\n                filterOnlyCompletedOnes={filterOnlyCompletedOnes}\n                clickClearHandler={clickClearHandler}\n            />\n        </Card>\n    );\n};\n\nexport default Filters;\n","import React, { FC } from \"react\";\nimport Create from \"../molecules/Create/Create\";\nimport Filters from \"../molecules/Filter/Filters\";\n\nconst Sidebar: FC = () => {\n    return (\n        <div className=\"side-bar\">\n            <Create />\n            <Filters />\n        </div>\n    );\n};\n\nexport default Sidebar;\n","import React, { FC, FormEvent, MouseEvent } from \"react\";\nimport \"./Modal.css\";\n\ninterface ModalProps {\n    title?: string;\n    children?: any;\n    okClick?: any;\n    cancelClick?: any;\n    okBtnCaption?: string;\n    cancelBtnCaption?: string;\n    okBtnClass?: string;\n}\n\nconst Modal: FC<ModalProps> = ({\n    title,\n    children,\n    okClick,\n    cancelClick,\n    okBtnCaption,\n    cancelBtnCaption,\n    okBtnClass,\n}) => {\n    return (\n        <div className=\"modal\">\n            <div className=\"modal-background\" onClick={cancelClick} />\n            <div className=\"modal-content\">\n                <header className=\"modal-card-head\">\n                    <p className=\"modal-card-title\">{title}</p>\n                    <button type=\"button\" className=\"cross-btn\" onClick={cancelClick} />\n                </header>\n                <section className=\"modal-card-body\">\n                    <div className=\"content\">{children}</div>\n                </section>\n                <footer className=\"modal-card-foot\">\n                    <a className={`button ${okBtnClass}`} onClick={okClick}>\n                        {okBtnCaption || \"Ok\"}\n                    </a>\n                    <a className=\"button\" onClick={cancelClick}>\n                        {cancelBtnCaption || \"Cancel\"}\n                    </a>\n                </footer>\n            </div>\n        </div>\n    );\n};\n\nexport default Modal;\n","import React, { FC, ReactNode } from \"react\";\n\ninterface LabelProps {\n    className?: string;\n    children?: ReactNode;\n}\n\nconst Label: FC<LabelProps> = ({ className, children }) => {\n    return <span className={className}>{children}</span>;\n};\n\nexport default Label;\n","import React, { FC, FormEvent, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { Todo } from \"../../../store/types\";\nimport { setTodoToEdit, updateTodo } from \"../../../store/actions\";\n\nimport Modal from \"../Modal/Modal\";\nimport Label from \"../../atoms/Label/Label\";\nimport TextField from \"../../atoms/TextField/TextField\";\nimport Checkbox from \"../../atoms/Checkbox/Checkbox\";\n\ninterface EditTodoModalProps {\n    todo: Todo;\n}\n\nconst EditTodoModal: FC<EditTodoModalProps> = ({ todo }) => {\n    const dispatch = useDispatch();\n    const [todoTitle, setTodoTitle] = useState(todo.title);\n    const [todoCompleteState, setTodoCompleteState] = useState(todo.completed);\n\n    const submitHandler = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n\n        if (todoTitle.trim() === \"\") {\n            return alert(\"Todo name is required!\");\n        }\n\n        if (todoTitle.trim() === todo.title) {\n            return alert(\"Todo name is the same as before!\");\n        }\n\n        dispatch(updateTodo(todo.id, todoTitle.trim(), todoCompleteState));\n    };\n\n    const inputTitleChangeHandler = (e: FormEvent<HTMLInputElement>) => {\n        setTodoTitle(e.currentTarget.value);\n    };\n\n    const checkCompleteChangeHandler = (e: FormEvent<HTMLInputElement>) => {\n        setTodoCompleteState(e.currentTarget.checked);\n    };\n\n    const hideModalHandler = () => {\n        dispatch(setTodoToEdit(\"\"));\n    };\n\n    return (\n        <div>\n            <Modal\n                title=\"Edit todo item\"\n                okClick={submitHandler}\n                cancelClick={hideModalHandler}\n                okBtnCaption={\"Save changes\"}\n                cancelBtnCaption={\"Cancel\"}\n                okBtnClass=\"success\"\n            >\n                <form>\n                    {/* <Label>Title</Label>\n                    <TextField name=\"todoTitle\" placeholder=\"Todo Name\" value={todoName} onChange={inputTitleChangeHandler} /> */}\n                    <div className=\"field\">\n                        <Label>Title: </Label>\n                        <TextField\n                            name=\"todoTitle\"\n                            placeholder=\"Todo title\"\n                            value={todoTitle}\n                            onChange={inputTitleChangeHandler}\n                        />\n                    </div>\n                    <div className=\"field\">\n                        <Label>Complete it? </Label>\n                        <Checkbox\n                            name=\"completedTodo\"\n                            checked={todoCompleteState}\n                            onChange={checkCompleteChangeHandler}\n                        />{\" \"}\n                    </div>\n                </form>\n            </Modal>\n        </div>\n    );\n};\n\nexport default EditTodoModal;\n","import React, { FC } from \"react\";\n\ninterface HeadingProps {\n    type?: string;\n    className?: string;\n    title?: string;\n}\n\nconst HeadingText: FC<HeadingProps> = ({ type, className, title }) => {\n    return <h3 className={className}>{title || \"\"}</h3>;\n};\n\nexport default HeadingText;\n","import React, { FC, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { RootState } from \"../../../store/store\";\nimport { getTodoById, deleteTodo, setTodoIdToDelete } from \"../../../store/actions\";\n\nimport Modal from \"../Modal/Modal\";\nimport HeadingText from \"../../atoms/Heading/Heading\";\n\ninterface DeleteTodoModalProps {\n    todoId: string;\n}\n\nconst DeleteTodoModal: FC<DeleteTodoModalProps> = ({ todoId }) => {\n    const dispatch = useDispatch();\n    const todo = useSelector((state: RootState) => state.todos.todoById);\n\n    useEffect(() => {\n        dispatch(getTodoById(todoId));\n    }, [dispatch, todoId]);\n\n    const deleteTodoHandler = () => {\n        dispatch(deleteTodo(todoId));\n        if (todo) {\n            console.log(`Todo \"${todo.title}\" deleted!`);\n        }\n    };\n\n    const hideModalHandler = () => {\n        dispatch(setTodoIdToDelete(\"\"));\n    };\n\n    return (\n        <div>\n            <Modal\n                title=\"Are you sure you want to delete this todo ?\"\n                okClick={deleteTodoHandler}\n                cancelClick={hideModalHandler}\n                okBtnCaption={\"Delete\"}\n                cancelBtnCaption={\"Cancel\"}\n                okBtnClass=\"danger\"\n            >\n                <div>\n                    <HeadingText title=\"All info will be deleted\" />\n                </div>\n            </Modal>\n        </div>\n    );\n};\n\nexport default DeleteTodoModal;\n","import React, { FC, MouseEvent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { RootState } from \"../../../store/store\";\nimport { setTodoToSelected, removeTodoFromSelected, setTodoToConfirm } from \"../../../store/actions\";\n\nimport Modal from \"../Modal/Modal\";\nimport HeadingText from \"../../atoms/Heading/Heading\";\n\ninterface ConfirmTodoMyListModalProps {\n    todoId: string;\n}\n\nconst ConfirmTodoMyListModal: FC<ConfirmTodoMyListModalProps> = ({ todoId }) => {\n    const dispatch = useDispatch();\n    const todo = useSelector((state: RootState) => state.todos.todoById);\n    const activeTab = useSelector((state: RootState) => state.tabs?.activeName);\n    const modalOppositeActiveTabName = activeTab === \"all\" ? \"my-list\" : \"all-list\";\n    const confirmTodoHandler = (e: MouseEvent<HTMLAnchorElement>): void => {\n        if (activeTab === \"all\") {\n            dispatch(setTodoToSelected(todoId));\n        } else {\n            dispatch(removeTodoFromSelected(todoId));\n        }\n        if (todo) {\n            console.log(`Todo \"${todo.title}\" moved to -- \"${activeTab}\" list!`);\n        }\n    };\n\n    const hideModalHandler = (e: MouseEvent<HTMLAnchorElement>): void => {\n        dispatch(setTodoToConfirm(\"\"));\n    };\n\n    return (\n        <div>\n            <Modal\n                title={`Are you sure you want to add this todo to \"${modalOppositeActiveTabName}\" ?`}\n                okClick={confirmTodoHandler}\n                cancelClick={hideModalHandler}\n                okBtnCaption={\"Move\"}\n                cancelBtnCaption={\"Cancel\"}\n                okBtnClass=\"success\"\n            >\n                <div>\n                    <HeadingText title=\"It will be present in both list\" />\n                </div>\n            </Modal>\n        </div>\n    );\n};\n\nexport default ConfirmTodoMyListModal;\n","import { Todo, FilterState } from \"../store/types\";\n\n// local storage related\nexport const getCollectionFromLS = (lsKeyName: string): any => {\n    if (localStorage.getItem(lsKeyName)) {\n        return JSON.parse(localStorage.getItem(lsKeyName) || \"{}\");\n    }\n\n    return {};\n};\n\nexport const saveCollectionToLS = (lsKeyName: string, todos: any) => {\n    localStorage.setItem(lsKeyName, JSON.stringify(todos));\n};\n\nexport const convertArrToObj = (arr: [], keyRef: string) => {\n    const objectCollection = arr.reduce((obj, item) => ({ ...obj, [item[keyRef]]: item }), {});\n    return objectCollection;\n};\n// helper methods\nexport const hoursFormat = (date: Date): string => {\n    let hours: any = date.getHours();\n    let minutes: any = date.getMinutes();\n    hours = hours < 10 ? \"0\" + hours : hours;\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\n    return hours + \":\" + minutes;\n};\n\n// filter out matched criterias\nexport const getFilteredTodos = (todos: Todo[], filters: FilterState, activeTab: string) => {\n    const { text, completed } = filters;\n    const selectedTodosFromLS = getCollectionFromLS(\"selected-todos\");\n    return todos.filter((todoItem) => {\n        const textTodosMatch: boolean = text ? todoItem.title.toLowerCase().includes(text.toLowerCase()) : true;\n        const completedTodosMatch: boolean = completed ? todoItem.completed : true;\n        const myTodosMatch: boolean =\n            activeTab === \"mylist\" ? Object.keys(selectedTodosFromLS).includes(String(todoItem.id)) : true;\n\n        return myTodosMatch && textTodosMatch && completedTodosMatch;\n    });\n};\n","import React, { FC, MouseEvent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../../store/store\";\nimport { setTodoToEdit, setTodoIdToDelete, setTodoToConfirm } from \"../../../store/actions\";\nimport { hoursFormat } from \"../../../utils/utils\";\n\nimport Card from \"../../atoms/Card/Card\";\nimport Button from \"../../atoms/Button/Button\";\nimport Label from \"../../atoms/Label/Label\";\nimport Badge from \"../../atoms/Badge/Badge\";\n\nimport \"./TodoItem.css\";\n\ninterface TodoItemProps {\n    item: any;\n}\n\nconst TodoItem: FC<TodoItemProps> = ({ item }) => {\n    const dispatch = useDispatch();\n    const activeTab = useSelector((state: RootState) => state.tabs?.activeName);\n    const { id, title, userId, creationDate } = item;\n\n    let addToListBtnTitle = \"Add to my list\";\n    let addToBtnClassName = \"\";\n    if (activeTab !== \"all\") {\n        addToListBtnTitle = \"Remove from my list\";\n        addToBtnClassName = \"danger\";\n    }\n\n    const setTodoToConfirmHandler = (id: string) => {\n        dispatch(setTodoToConfirm(id));\n    };\n\n    const setTodoToEditHandler = (id: string) => {\n        dispatch(setTodoToEdit(id));\n    };\n\n    const setTodoIdToDeleteHandler = (id: string) => {\n        dispatch(setTodoIdToDelete(id));\n    };\n\n    return (\n        <Card>\n            <div className=\"box\">\n                <div className=\"box-item\">\n                    <p>\n                        {item?.completed ? <Badge title=\"Completed\" /> : \" \"}\n                        <Label className=\"box-item-head\">{title}</Label>\n                    </p>\n                    <div className=\"action-btn-container\">\n                        <Button\n                            className={`action-btn ${addToBtnClassName}`}\n                            title={addToListBtnTitle}\n                            onClick={(e: MouseEvent<HTMLAnchorElement>) => {\n                                setTodoToConfirmHandler(id);\n                            }}\n                        />\n                        <Button\n                            className=\"action-btn success\"\n                            title={\"Edit\"}\n                            onClick={(e: MouseEvent<HTMLAnchorElement>) => {\n                                setTodoToEditHandler(id);\n                            }}\n                        />\n                        <Button\n                            className=\"action-btn danger\"\n                            title={\"Delete\"}\n                            onClick={(e: MouseEvent<HTMLAnchorElement>) => {\n                                setTodoIdToDeleteHandler(id);\n                            }}\n                        />\n                    </div>\n                </div>\n                <div className=\"box-item\">\n                    <p>\n                        Id:\n                        <Label>{id}</Label>\n                    </p>\n                    <p>\n                        User ID:\n                        <Label>{userId}</Label>\n                    </p>\n                    <p>\n                        Creation Time:\n                        <Label>{creationDate ? hoursFormat(new Date(Number(creationDate))) : \"\"} </Label>\n                        {/* <Label>{new Date(item?.creationDate) || \"\"}</Label> */}\n                    </p>\n                </div>\n            </div>\n        </Card>\n    );\n};\n\nexport default TodoItem;\n","import React, { FC, useState, MouseEvent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../../store/store\";\n\nimport { Todo } from \"../../../store/types\";\nimport { getFilteredTodos } from \"../../../utils/utils\";\n\nimport TodoItem from \"./TodoItem\";\n\nimport \"./TodoList.css\";\ninterface TodoListProps {\n    todosData: any;\n}\n\nconst TodoList: FC<TodoListProps> = ({ todosData }) => {\n    const [currentPage, setCurrentPage] = useState(1);\n\n    const filtersData = useSelector((state: RootState) => state.filters);\n    const activeTab = useSelector((state: RootState) => state.tabs?.activeName);\n\n    const filteredTodos = getFilteredTodos(todosData, filtersData, activeTab);\n    const filteredTodosLength = filteredTodos.length;\n    const todosPerPage = 5;\n    const totalPages = Math.ceil(filteredTodosLength / todosPerPage);\n    const markToResetPages = currentPage * todosPerPage;\n\n    // reset the current page number based on tab change (for respective todolist count)\n    if (filteredTodosLength < markToResetPages) {\n        // setCurrentPage(1);\n    }\n\n    // for displaying current todos\n    const indexOfLastTodo = currentPage * todosPerPage;\n    const indexOfFirstTodo = indexOfLastTodo - todosPerPage;\n    const currentTodos = filteredTodos.slice(indexOfFirstTodo, indexOfLastTodo);\n\n    // for displaying page numbers\n    const pageNumbers = [];\n    for (let i = 1; i <= totalPages; i++) {\n        pageNumbers.push(i);\n    }\n\n    // render pagination\n    const renderPageNumbers = pageNumbers.map((pgNumber) => {\n        return (\n            <li\n                key={pgNumber}\n                onClick={(e: MouseEvent<HTMLElement>) => {\n                    setCurrentPage(pgNumber);\n                }}\n                className={currentPage === pgNumber ? \"active-page\" : \"\"}\n            >\n                {pgNumber}\n            </li>\n        );\n    });\n\n    // render todo list\n    const todosCollection = currentTodos.map((todoItem: Todo) => [<TodoItem key={todoItem?.id} item={todoItem} />]);\n\n    return (\n        <section>\n            {todosCollection.length === 0 ? \"No todos available\" : todosCollection}\n            {todosCollection.length === 0 ? \"\" : <ul className=\"page-numbers\">{renderPageNumbers}</ul>}\n        </section>\n    );\n};\n\nexport default TodoList;\n","import React, { FC, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../../store/store\";\nimport { getTodos, setLoading } from \"../../store/actions\";\n\nimport EditTodoModal from \"../molecules/TodoList/EditTodoModal\";\nimport DeleteTodoModal from \"../molecules/TodoList/DeleteTodoModal\";\nimport ConfirmTodoMyListModal from \"../molecules/TodoList/ConfirmTodoMyListModal\";\n\nimport TodoList from \"../molecules/TodoList/TodoList\";\nimport Heading from \"../atoms/Heading/Heading\";\n\nconst MainContent: FC = () => {\n    const dispatch = useDispatch();\n\n    const loading = useSelector((state: RootState) => state.todos?.loading);\n    const todosData = useSelector((state: RootState) => state.todos?.data);\n    const error = useSelector((state: RootState) => state.todos?.error);\n    const todoToEdit = useSelector((state: RootState) => state.todos?.todoToEdit);\n    const todoIdToDelete = useSelector((state: RootState) => state.todos?.todoIdToDelete);\n    const todoToConfirm = useSelector((state: RootState) => state.todos?.todoToConfirm);\n\n    useEffect(() => {\n        dispatch(setLoading());\n        dispatch(getTodos());\n        // dispatch(getTodos([{ id: 1, name: \"One\", creationDate: \"June 2020\", completed: false }]));\n    }, [dispatch]);\n\n    return (\n        <div className=\"main-contents\">\n            {loading ? <Heading title=\"Loading todos...\" /> : todosData && <TodoList todosData={todosData} />}\n            {error && <Heading title={error} />}\n            {todoToEdit && <EditTodoModal todo={todoToEdit} />}\n            {todoIdToDelete && <DeleteTodoModal todoId={todoIdToDelete} />}\n            {todoToConfirm && <ConfirmTodoMyListModal todoId={todoToConfirm} />}\n        </div>\n    );\n};\n\nexport default MainContent;\n","import React, { FC } from \"react\";\nimport Navbar from \"../organisms/Navbar\";\nimport Sidebar from \"../organisms/Sidebar\";\nimport MainContent from \"../organisms/MainContent\";\nimport \"./Dashboard.css\";\nimport \"./DashboardMediaQueries.css\";\n\nconst Dashboard: FC = () => {\n    return (\n        <div>\n            <Navbar />\n            <div className=\"dashboard-contents\">\n                <Sidebar />\n                <MainContent />\n            </div>\n        </div>\n    );\n};\n\nexport default Dashboard;\n","import React from \"react\";\nimport Dashboard from \"./components/templates/Dashboard\";\nimport \"./App.css\";\n\nfunction App() {\n    return (\n        <div className=\"app-container\">\n            <Dashboard />\n        </div>\n    );\n}\n\nexport default App;\n","import App from \"../App\";\nimport { compose } from \"redux\";\n\nexport default compose()(App);\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import {\n    TodosState,\n    GET_TODOS,\n    SET_LOADING,\n    TodosAction,\n    SET_ERROR,\n    ADD_TODO,\n    GET_TODO_BY_ID,\n    SET_TODOID_TO_DELETE,\n    SET_TODO_TO_EDIT,\n    DELETE_TODO,\n    UPDATE_TODO,\n    SET_TODO_TO_CONFIRM,\n    SET_SELECTED_TODOS,\n    REMOVE_SELECTED_TODOS,\n} from \"../types\";\n\nimport { getCollectionFromLS, saveCollectionToLS, convertArrToObj } from \"../../utils/utils\";\n\nconst initialTodosState: TodosState = {\n    data: null,\n    loading: false,\n    error: \"\",\n    todoIdToDelete: \"\",\n    todoToEdit: null,\n    todoById: null,\n    todoToConfirm: \"\",\n    selectedTodos: null,\n};\n\nexport const todosReducer = (state = initialTodosState, action: TodosAction): TodosState => {\n    const todosFromLS = getCollectionFromLS(\"todos\");\n    const selectedTodosFromLS = getCollectionFromLS(\"selected-todos\");\n    switch (action.type) {\n        case GET_TODOS:\n            let fetchedTodos: any = [];\n            if (!Object.keys(todosFromLS).length) {\n                fetchedTodos = action.payload;\n                saveCollectionToLS(\"todos\", convertArrToObj(fetchedTodos, \"id\"));\n            } else {\n                fetchedTodos = Object.values(todosFromLS);\n            }\n            // const fetchedTodos = !Object.keys(todosFromLS).length ? action.payload : Object.values(todosFromLS)\n            return {\n                data: fetchedTodos,\n                loading: false,\n                error: \"\",\n                todoIdToDelete: \"\",\n                todoToEdit: null,\n                todoById: null,\n                todoToConfirm: \"\",\n                selectedTodos: !Object.keys(selectedTodosFromLS).length ? null : Object.values(selectedTodosFromLS),\n            };\n        case SET_LOADING:\n            return {\n                ...state,\n                loading: true,\n            };\n        case SET_ERROR:\n            return {\n                ...state,\n                error: action.payload,\n                loading: false,\n            };\n        case ADD_TODO:\n            const clonedTodosFromLS = { ...todosFromLS };\n            clonedTodosFromLS[action.payload.id] = action.payload;\n            saveCollectionToLS(\"todos\", clonedTodosFromLS);\n            return {\n                ...state,\n                data: Object.values(clonedTodosFromLS),\n            };\n\n        case GET_TODO_BY_ID:\n            const todo = todosFromLS[action.payload];\n            return {\n                ...state,\n                todoById: todo,\n            };\n\n        case SET_TODOID_TO_DELETE:\n            return {\n                ...state,\n                todoIdToDelete: action.payload,\n            };\n\n        case SET_TODO_TO_EDIT:\n            const todoToEdit = todosFromLS[action.payload];\n            return {\n                ...state,\n                todoToEdit,\n            };\n\n        case DELETE_TODO:\n            const clonedTodosFromLS2 = { ...todosFromLS };\n            const todoId = clonedTodosFromLS2[action.payload].id;\n            delete clonedTodosFromLS2[action.payload];\n            saveCollectionToLS(\"todos\", clonedTodosFromLS2);\n\n            // delete selectedTodosFromLS[todoId];\n            // saveCollectionToLS(\"selected-todos\", selectedTodosFromLS);\n            return {\n                ...state,\n                data: Object.values(clonedTodosFromLS2),\n                todoIdToDelete: \"\",\n                todoById: null,\n                selectedTodos: Object.values(selectedTodosFromLS),\n            };\n\n        case UPDATE_TODO:\n            const clonedTodosFromLS3 = { ...todosFromLS };\n            clonedTodosFromLS3[action.payload.id].title = action.payload.title;\n            clonedTodosFromLS3[action.payload.id].completed = action.payload.completed;\n            saveCollectionToLS(\"todos\", clonedTodosFromLS3);\n            return {\n                ...state,\n                data: Object.values(clonedTodosFromLS3),\n                todoToEdit: null,\n            };\n\n        case SET_TODO_TO_CONFIRM:\n            const todoToConfirm = action.payload;\n            return {\n                ...state,\n                todoToConfirm,\n            };\n\n        case SET_SELECTED_TODOS:\n            // const selectedTodos = getCollectionFromLS(\"todos\")[action.payload];\n            // return {\n            //     ...state,\n            //     selectedTodos,\n            // };\n\n            const clonedSelectedTodosFromLS = { ...selectedTodosFromLS };\n            clonedSelectedTodosFromLS[action.payload] = action.payload;\n            saveCollectionToLS(\"selected-todos\", clonedSelectedTodosFromLS);\n\n            return {\n                ...state,\n                todoToConfirm: \"\",\n                selectedTodos: clonedSelectedTodosFromLS,\n            };\n\n        case REMOVE_SELECTED_TODOS:\n            const clonedSelectedTodosFromLSToRemove = { ...selectedTodosFromLS };\n            delete clonedSelectedTodosFromLSToRemove[action.payload];\n            saveCollectionToLS(\"selected-todos\", clonedSelectedTodosFromLSToRemove);\n            return {\n                ...state,\n                todoToConfirm: \"\",\n                selectedTodos: clonedSelectedTodosFromLSToRemove,\n            };\n\n        default:\n            return state;\n    }\n};\n","import { TabsState, SET_TAB_ACTIVE, TabsAction } from \"../types\";\n\nconst initialTabsState: TabsState = {\n    activeName: \"all\",\n};\n\nexport const tabsReducer = (state = initialTabsState, action: TabsAction): TabsState => {\n    switch (action.type) {\n        case SET_TAB_ACTIVE:\n            return {\n                ...state,\n                activeName: action.activeName,\n            };\n        default:\n            return state;\n    }\n};\n","import { FilterState, FILTER_TEXT, FILTER_COMPLETED, FILTER_CLEAR, FilterAction } from \"../types\";\n\nconst initialFilterState: FilterState = {\n    text: \"\",\n    completed: false,\n};\n\nexport const filtersReducer = (state = initialFilterState, action: FilterAction): FilterState => {\n    switch (action.type) {\n        case FILTER_TEXT:\n            return {\n                ...state,\n                text: action.text,\n            };\n        case FILTER_COMPLETED:\n            return {\n                ...state,\n                completed: action.completed,\n            };\n        case FILTER_CLEAR:\n            return {\n                ...state,\n                text: action.defaultFilter.text,\n                completed: action.defaultFilter.completed,\n            };\n        default:\n            return state;\n    }\n};\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\n\nimport { todosReducer, tabsReducer, filtersReducer } from \"./reducers\";\n\nconst mainReducer = combineReducers({\n    todos: todosReducer,\n    tabs: tabsReducer,\n    filters: filtersReducer,\n});\n\nexport const store = createStore(mainReducer, composeWithDevTools(applyMiddleware(thunk)));\nexport type RootState = ReturnType<typeof mainReducer>;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/Workspace\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}